#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
A collection of methods on applying prime
'''

import pdb
import unittest

prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23]
lastn = prime_list[-1]

def isPrime(num):
    """
    Fast check if the number is prime number

    Arguments: num -- number to test

    Result: Boolean value indicate if the number prime or not.
    """
    if num <= 1:
        return False
    elif num % 2 == 0 or num % 3 == 0:
        return False
    #elif num in prime_list:
    #    return True

    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

def sieve_era(num):
    """
    Generating a list of prime number not exceeds the num.

    Arguments: num -- number upbounding the prime number list.

    Result: a list contains prime numbers and upbounded by num(inclusive).
    """
    if num <= 1:
        return []
    elif num == 2:
        return [2]

    primelist = [2]
    oddnumbers = list(range(3,num + 1,2))
    # Refinement of checking odd number only, hence the real length
    # of candidates is half of [1:n]
    halflength = (num - 1) // 2
    sieve_list = [True] * halflength

    for i in range (0, halflength): 
        if sieve_list[i]:
            # odd number generated by 2*i+1, 2*i+3 make the candidate number
            # start from 3.
            # (2*i+3)**2 = square of the candidate number
            # square // 2 - 1 locate its index in the sieve list.
            primelist.append(oddnumbers[i])
            j = (2 * i + 3) ** 2 // 2 - 1
            for k in range(j, halflength, (2 * i + 3)):
                sieve_list[k] = 0

    return primelist

def prime(num):
    """
    Generic generator of prime numbers that produce prime numbers until
        the requested length and return the last element.

    Arguments: num -- the index of prime number to be returned

    Result: the prime number which is numth in prime number set.
    """
    global lastn
    while len(prime_list) < num:
        lastn += 2
        if isPrime(lastn):
            prime_list.append(lastn)
    return prime_list[num - 1]


class TestPrime(unittest.TestCase):
    def check(self, num):
        expected = [x for x in range(num + 1) if isPrime(x)]
        found = sieve_era(num)
        self.assertEqual(expected, found)

    def runTest(self):
        self.check(13)
        self.check(20)
        self.check(1000)

    def test_primes(self):
        self.assertEqual(13, prime(6))
        self.assertEqual(19, prime(8))
        self.assertEqual(29, prime(10))


if __name__ == '__main__':
    unittest.main()
